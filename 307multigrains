#!/usr/bin/env python3

import sys
import math

fert_dep = [
    [1, 1, 2, 0],
    [0, 2, 1, 0],
    [1, 0, 0, 3],
    [0, 1, 1, 1],
    [2, 0, 0, 2]
]


def get_args():
    if len(sys.argv) == 0:
        exit(84)
    if sys.argv[1] == "-h":
        print("""USAGE
    ./307multigrains n1 n2 n3 n4 po pw pc pb ps
DESCRIPTION
    n1  number of tons of fertilizer F1
    n2  number of tons of fertilizer F2
    n3  number of tons of fertilizer F3
    n4  number of tons of fertilizer F4
    po  price of one unit of oat
    pw  price of one unit of wheat
    pc  price of one unit of corn
    pb  price of one unit of barley
    ps  price of one unit of soy""")
        exit(0)
    if len(sys.argv) != 10:
        exit(84)
    return list(map(float, sys.argv[1:5])), list(map(float, sys.argv[5:]))


def create_matrix(N, P):
    M = [
        [1, 0, 1, 0, 2],
        [1, 2, 0, 1, 0],
        [2, 1, 0, 1, 0],
        [0, 0, 3, 1, 2],
        list(map(lambda x:x * -1, P)) + ([0] * 5)
    ]
    for i in range(0, 4):
        for j in range(0, 4):
            M[i].append(1 if j == i else 0)
        M[i].append(N[i])
    return M


def get_pivot_idx(M):
    maxy = len(M)
    maxx = len(M[0])
    L = M[maxy - 1][:5]
    m = min(L)
    y_p = -1
    x_p = -1
    if m >= 0:
        return -1, -1
    else:
        x_p = L.index(m)
    m = 99999999999999
    for i in range(0, maxy - 1):
        if M[i][maxx - 1]:
            if M[i][x_p] > 0 and (m > M[i][maxx - 1] / M[i][x_p] > 0):
                y_p = i
                m = M[i][maxx - 1] / M[i][x_p]
        elif m > M[i][x_p] > 0:
            y_p = i
            m = M[i][maxx - 1] / M[i][x_p]
    return y_p, x_p


def apply_pivot(M, y_p, x_p):
    p_value = M[y_p][x_p]
    M[y_p] = list(map(lambda x: x / p_value, M[y_p]))
    maxy = len(M)
    maxx = len(M[0])
    for i in range(0, maxy):
        if i == y_p:
            continue
        # coeff multiplier
        km = M[i][x_p]
        for j in range(0, maxx):
            M[i][j] -= km * M[y_p][j]


def simplexe(M):
    products = [-1] * 4
    while True:
        y_p, x_p = get_pivot_idx(M)
        if y_p == -1 or x_p == -1:
            break
        apply_pivot(M, y_p, x_p)
        products[y_p] = x_p
#        print(repr(M).replace("[", "\n["))
    return products


def checkargs(N, P):
    if any(map(lambda x: x < 0, N)):
        raise Exception("Number of fertilizer cannot be negative")
    if any(map(lambda x: x < 0, P)):
        raise Exception("Prices cannot be negative")


def main():
    N, P = get_args()
    checkargs(N, P)
    print("Resources: {:.0f} F1, {:.0f} F2, {:.0f} F3, {:.0f} F4".format(*N), end="\n\n")
    M = create_matrix(N, P)
    res = simplexe(M)
    e = len(M[0]) - 1
    dump = ["0"] * 5
    tt = 0
    for i in range(0, 4):
        if res[i] != -1:
            if M[i][-1] != 0:
                dump[res[i]] = "{:.2f}".format(M[i][-1])
                tt += M[i][-1] * P[res[i]]
            else:
                dump[res[i]] = "{:.0f}".format(M[i][-1])
    print("Oat: {} units at ${:.0f}/unit".format(dump[0], P[0]))
    print("Wheat: {} units at ${:.0f}/unit".format(dump[1], P[1]))
    print("Corn: {} units at ${:.0f}/unit".format(dump[2], P[2]))
    print("Barley: {} units at ${:.0f}/unit".format(dump[3], P[3]))
    print("Soy: {} units at ${:.0f}/unit".format(dump[4], P[4]))
    print()
    print("Total production value: ${:.2f}".format(tt))


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        exit(84)